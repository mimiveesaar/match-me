[{"name":"tech.kood.match_me.connections.internal.database.entities.AcceptedConnectionEntity","comment":"Represents an accepted connection entity in the system."},{"name":"tech.kood.match_me.connections.internal.database.entities.BlockedConnectionEntity","comment":"Entity representing a blocked connection between two users. This record stores information about users blocking each other."},{"name":"tech.kood.match_me.connections.internal.database.entities.PendingConnectionEntity","comment":"Represents a pending connection entity in the system."},{"name":"tech.kood.match_me.connections.internal.database.entities.RejectedConnectionEntity","comment":"Entity representing a rejected connection between two users. This record stores information about connection requests that have been explicitly rejected."},{"name":"tech.kood.match_me.connections.internal.database.mappers.BlockedConnectionRowMapper","comment":"Row mapper for mapping database rows to BlockedConnectionEntity objects."},{"name":"tech.kood.match_me.connections.internal.database.mappers.RejectedConnectionRowMapper","comment":"Row mapper for mapping database rows to RejectedConnectionEntity objects."},{"name":"tech.kood.match_me.connections.internal.database.repositories.AcceptedConnectionsRepository","methods":[{"name":"save","signature":"save(tech.kood.match_me.connections.internal.database.entities.AcceptedConnectionEntity)","comment":"Saves an accepted connection to the database. If a connection with the same ID already exists, it will be updated."},{"name":"findById","signature":"findById(java.util.UUID)","comment":"Finds an accepted connection by its ID."},{"name":"findBySenderUserId","signature":"findBySenderUserId(java.util.UUID)","comment":"Finds all accepted connections sent by a specific user."},{"name":"findByTargetUserId","signature":"findByTargetUserId(java.util.UUID)","comment":"Finds all accepted connections received by a specific user."},{"name":"findBetweenUsers","signature":"findBetweenUsers(java.util.UUID, java.util.UUID)","comment":"Finds all accepted connections between two users (bidirectional)."},{"name":"existsBetweenUsers","signature":"existsBetweenUsers(java.util.UUID, java.util.UUID)","comment":"Checks if an accepted connection exists between two users (bidirectional)."},{"name":"deleteById","signature":"deleteById(java.util.UUID)","comment":"Deletes an accepted connection by its ID."},{"name":"deleteBySenderUserId","signature":"deleteBySenderUserId(java.util.UUID)","comment":"Deletes all accepted connections sent by a specific user."},{"name":"deleteByTargetUserId","signature":"deleteByTargetUserId(java.util.UUID)","comment":"Deletes all accepted connections received by a specific user."},{"name":"deleteByUserId","signature":"deleteByUserId(java.util.UUID)","comment":"Deletes all accepted connections involving a specific user (as sender or target)."},{"name":"deleteAll","signature":"deleteAll()","comment":"Deletes all accepted connections. Use with caution as this operation cannot be undone. This method is primarily intended for testing purposes."},{"name":"findAll","signature":"findAll()","comment":"Finds all accepted connections in the system. Use with caution in production as this may return a large amount of data."},{"name":"countByUserId","signature":"countByUserId(java.util.UUID)","comment":"Counts the total number of accepted connections for a specific user (both sent and received)."},{"name":"countBySenderUserId","signature":"countBySenderUserId(java.util.UUID)","comment":"Counts the number of accepted connections sent by a specific user."},{"name":"countByTargetUserId","signature":"countByTargetUserId(java.util.UUID)","comment":"Counts the number of accepted connections received by a specific user."},{"name":"findByCreatedAtBetween","signature":"findByCreatedAtBetween(java.time.Instant, java.time.Instant)","comment":"Finds accepted connections created within a specific time range."}]},{"name":"tech.kood.match_me.connections.internal.database.repositories.BlockedConnectionsRepository","methods":[{"name":"save","signature":"save(tech.kood.match_me.connections.internal.database.entities.BlockedConnectionEntity)","comment":"Saves a blocked connection to the database. If a connection with the same ID already exists, it will be updated."},{"name":"findById","signature":"findById(java.util.UUID)","comment":"Finds a blocked connection by its ID."},{"name":"isBlocked","signature":"isBlocked(java.util.UUID, java.util.UUID)","comment":"Checks if a user has blocked another user."},{"name":"existsBetweenUsers","signature":"existsBetweenUsers(java.util.UUID, java.util.UUID)","comment":"Checks if there's any block between two users (bidirectional check). Uses the unique index efficiently by normalizing the user order."},{"name":"findByBlockerUserId","signature":"findByBlockerUserId(java.util.UUID)","comment":"Finds all users blocked by a specific user."},{"name":"findByBlockedUserId","signature":"findByBlockedUserId(java.util.UUID)","comment":"Finds all blockers of a specific user."},{"name":"removeBlock","signature":"removeBlock(java.util.UUID, java.util.UUID)","comment":"Removes a block between two users."},{"name":"deleteById","signature":"deleteById(java.util.UUID)","comment":"Deletes a blocked connection by its ID."},{"name":"deleteByUserId","signature":"deleteByUserId(java.util.UUID)","comment":"Deletes all blocked connections involving a specific user (as blocker or blocked)."},{"name":"countByUserId","signature":"countByUserId(java.util.UUID)","comment":"Counts the total number of blocked connections for a specific user (as blocker or blocked)."},{"name":"deleteAll","signature":"deleteAll()","comment":"Deletes all blocked connections. Use with caution as this operation cannot be undone. This method is primarily intended for testing purposes."}]},{"name":"tech.kood.match_me.connections.internal.database.repositories.PendingConnectionsRepository","methods":[{"name":"save","signature":"save(tech.kood.match_me.connections.internal.database.entities.PendingConnectionEntity)","comment":"Saves a pending connection to the database. If a connection with the same ID already exists, it will be updated."},{"name":"findById","signature":"findById(java.util.UUID)","comment":"Finds a pending connection by its ID."},{"name":"findBySenderUserId","signature":"findBySenderUserId(java.util.UUID)","comment":"Finds all pending connections sent by a specific user."},{"name":"findByTargetUserId","signature":"findByTargetUserId(java.util.UUID)","comment":"Finds all pending connections received by a specific user."},{"name":"findBySenderAndTarget","signature":"findBySenderAndTarget(java.util.UUID, java.util.UUID)","comment":"Finds a pending connection between two specific users."},{"name":"existsBetweenUsers","signature":"existsBetweenUsers(java.util.UUID, java.util.UUID)","comment":"Checks if a pending connection exists between two users (in either direction)."},{"name":"deleteById","signature":"deleteById(java.util.UUID)","comment":"Deletes a pending connection by its ID."},{"name":"deleteBySenderAndTarget","signature":"deleteBySenderAndTarget(java.util.UUID, java.util.UUID)","comment":"Deletes a pending connection between specific users."},{"name":"deleteAllForUser","signature":"deleteAllForUser(java.util.UUID)","comment":"Deletes all pending connections for a specific user (both sent and received)."},{"name":"deleteOlderThan","signature":"deleteOlderThan(java.time.Instant)","comment":"Deletes all pending connections created before a specific timestamp."},{"name":"countBySenderUserId","signature":"countBySenderUserId(java.util.UUID)","comment":"Counts all pending connections sent by a specific user."},{"name":"countByTargetUserId","signature":"countByTargetUserId(java.util.UUID)","comment":"Counts all pending connections received by a specific user."},{"name":"deleteAll","signature":"deleteAll()","comment":"Deletes all pending connections from the database. This method should be used with caution, primarily for testing purposes."},{"name":"findAll","signature":"findAll()","comment":"Finds all pending connections in the database. This method should be used with caution as it may return a large amount of data."}]},{"name":"tech.kood.match_me.connections.internal.database.repositories.RejectedConnectionsRepository","methods":[{"name":"save","signature":"save(tech.kood.match_me.connections.internal.database.entities.RejectedConnectionEntity)","comment":"Saves a rejected connection to the database. If a connection with the same ID already exists, it will be updated."},{"name":"findById","signature":"findById(java.util.UUID)","comment":"Finds a rejected connection by its ID."},{"name":"existsBetweenUsers","signature":"existsBetweenUsers(java.util.UUID, java.util.UUID)","comment":"Checks if a connection has been rejected between two users (bidirectional). Uses the unique index efficiently by normalizing the user order."},{"name":"findBySenderId","signature":"findBySenderId(java.util.UUID)","comment":"Finds all rejected connections sent by a specific user."},{"name":"findByTargetUserId","signature":"findByTargetUserId(java.util.UUID)","comment":"Finds all rejected connections received by a specific user."},{"name":"findByRejectedByUserId","signature":"findByRejectedByUserId(java.util.UUID)","comment":"Finds all connections rejected by a specific user."},{"name":"deleteById","signature":"deleteById(java.util.UUID)","comment":"Deletes a rejected connection by its ID."},{"name":"deleteByUserId","signature":"deleteByUserId(java.util.UUID)","comment":"Deletes all rejected connections involving a specific user (as sender, target, or rejector)."},{"name":"countByUserId","signature":"countByUserId(java.util.UUID)","comment":"Counts the total number of rejected connections for a specific user (sent, received, or performed rejection)."},{"name":"deleteAll","signature":"deleteAll()","comment":"Deletes all rejected connections. Use with caution as this operation cannot be undone. This method is primarily intended for testing purposes."}]},{"name":"tech.kood.match_me.user_management.api.UserManagement","methods":[{"name":"registerUser","signature":"registerUser(tech.kood.match_me.user_management.internal.features.registerUser.RegisterUserRequest)","comment":"Registers a new user with the provided details."},{"name":"getUserByEmail","signature":"getUserByEmail(tech.kood.match_me.user_management.internal.features.getUser.results.GetUserByEmailResults)","comment":"Retrieves user information based on the provided email address."},{"name":"getUserByUsername","signature":"getUserByUsername(tech.kood.match_me.user_management.internal.features.getUser.results.GetUserByUsernameResults)","comment":"Retrieves user information based on the provided username."},{"name":"getUserById","signature":"getUserById(tech.kood.match_me.user_management.internal.features.getUser.results.GetUserByIdResults)","comment":"Retrieves user information based on the provided user ID."}]},{"name":"tech.kood.match_me.user_management.internal.database.entities.UserEntity","comment":"Represents a user entity in the system."},{"name":"tech.kood.match_me.user_management.internal.features.getUser.results.GetUserByEmailResults$InvalidEmail","comment":"Represents the result of a failed attempt to retrieve a user by email due to an invalid email format."},{"name":"tech.kood.match_me.user_management.internal.features.getUser.results.GetUserByEmailResults$Success","comment":"Represents a successful result of fetching a user by email."},{"name":"tech.kood.match_me.user_management.internal.features.getUser.results.GetUserByEmailResults$SystemError","comment":"Represents a system error result for the GetUserByEmail operation."},{"name":"tech.kood.match_me.user_management.internal.features.getUser.results.GetUserByEmailResults$UserNotFound","comment":"Represents the result when a user is not found by their email."},{"name":"tech.kood.match_me.user_management.internal.features.getUser.results.GetUserByIdResults$InvalidUserId","comment":"Represents the result of a failed attempt to retrieve a user by ID due to an invalid user ID."},{"name":"tech.kood.match_me.user_management.internal.features.getUser.results.GetUserByIdResults$Success","comment":"Represents a successful result of fetching a user by ID."},{"name":"tech.kood.match_me.user_management.internal.features.getUser.results.GetUserByIdResults$SystemError","comment":"Represents a system error result for the GetUserById operation."},{"name":"tech.kood.match_me.user_management.internal.features.getUser.results.GetUserByIdResults$UserNotFound","comment":"Represents the result when a user is not found by their ID."},{"name":"tech.kood.match_me.user_management.internal.features.getUser.results.GetUserByUsernameResults$InvalidUsername","comment":"Represents the result of a failed attempt to retrieve a user by username due to an invalid username."},{"name":"tech.kood.match_me.user_management.internal.features.getUser.results.GetUserByUsernameResults$Success","comment":"Represents a successful result of fetching a user by username."},{"name":"tech.kood.match_me.user_management.internal.features.getUser.results.GetUserByUsernameResults$SystemError","comment":"Represents a system error result for the GetUserByUsername operation."},{"name":"tech.kood.match_me.user_management.internal.features.getUser.results.GetUserByUsernameResults$UserNotFound","comment":"Represents the result when a user is not found by their username."},{"name":"tech.kood.match_me.user_management.internal.features.refreshToken.createToken.CreateRefreshTokenRequest","comment":"Represents a request to refresh a token, containing identifiers for the request, the user, and an optional tracing ID for tracking purposes."},{"name":"tech.kood.match_me.user_management.internal.features.refreshToken.getToken.GetRefreshTokenHandler","methods":[{"name":"handle","signature":"handle(tech.kood.match_me.user_management.internal.features.refreshToken.getToken.GetRefreshTokenRequest)","comment":"Handles the retrieval and validation of a refresh token based on the provided request. <p> This method performs the following steps: <ul> <li>Validates that the token in the request is not null or blank.</li> <li>Attempts to find a valid refresh token entity using the provided token and the current time.</li> <li>If the token is invalid or not found, returns an {@code InvalidToken} result.</li> <li>If the token is valid, maps it to a domain object and returns a {@code Success} result.</li> <li>In case of any unexpected exceptions, returns a {@code SystemError} result.</li> <li>Publishes a {@code GetRefreshTokenEvent} with the request and result at each step.</li> </ul>"}]},{"name":"tech.kood.match_me.user_management.internal.features.refreshToken.invalidateToken.InvalidateRefreshTokenRequest","comment":"Represents a request to invalidate a refresh token."},{"name":"tech.kood.match_me.user_management.internal.features.registerUser.RegisterUserEvent","comment":"Event representing the registration of a new user."},{"name":"tech.kood.match_me.user_management.internal.features.registerUser.RegisterUserRequest","comment":"Represents a request to register a new user in the system."},{"name":"tech.kood.match_me.user_management.models.User","comment":"Represents a user in the system."}]
